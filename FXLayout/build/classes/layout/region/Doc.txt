
Setting Padding:

The padding of a Region is the space around its content area. The Region class contains a padding property
of the ObjectProperty<Insets> type. You can set separate padding widths for each of the four sides.
    // Create an HBox
    HBox hb = new HBox();

    // A uniform padding of 10px around all edges
    hb.setPadding(new Insets(10));

    // A non-uniform padding: 2px top, 4px right, 6px bottom, and 8px left
    hb.setPadding(new Insets(2, 4, 6, 8));


Setting Margins:

Setting margins on a Region is not supported directly. Most layout panes support margins for their children.
If you want margins for a Region, add it to a layout pane, for example, an HBox, and use the layout pane
instead of the Region.

    Pane p1 = new Pane();
    p1.setPrefSize(100, 20);
    HBox box = new HBox();

    // Set a margin of 10px around all four sides of the Pane
    HBox.setMargin(p1, new Insets(10));
    box.getChildren().addAll(p1);

Now, use box instead of p1 to get the margins around p1.


In JavaFX, coordinates can be specified in floating-point numbers: for example, 0.5, 6.0, etc., which
lets you represent any part of a pixel. If the floating-point number is an integer (e.g., 2.0, 3.0, etc.), it will
represent corners of the pixel.
A Region using floating-point numbers as coordinates will not align exactly at the pixel boundary and its
border may look fuzzy. The Region class contains a snapToPixel property to address this issue. By default, it
is set to true and a Region adjusts the position, spacing, and size values of its children to an integer to match
the pixel boundaries, resulting in crisp boundaries for the children. If you do not want a Region to adjust
these values to integers, set the snapToPixel property to false.
