
The Parent class contains three methods to get the list of children of a container:
    • protected ObservableList<Node> getChildren()
    • public ObservableList<Node> getChildrenUnmodifiable()
    • protected <E extends Node> List<E> getManagedChildren()

The getChildren() method returns a modifiable ObservableList of the child nodes of a container.
If you want to add a node to a container, you would add the node to this list. This is the most commonly used
method for container classes.

Notice the protected access for the getChildren() method. If a subclass of the Parent class does not
want to be a container, it will keep the access for this method as protected. For example, control-related
classes (Button, TextField, etc.) keep this method as protected, so you cannot add child nodes to them.
A container class overrides this method and makes it public. For example, the Group and Pane classes
expose this method as public.

The getChildrenUnmodifiable() method is declared public in the Parent class. It returns a read-only
ObservableList of children. It is useful in two scenarios:
    • You need to pass the list of children of a container to a method that should not modify the list.
    • You want to know what makes up a control, which is not a container.

The getManagedChildren() method has the protected access. Container classes do not expose it as
public. They use it internally to get the list of managed children, during layouts. You will use this method to
roll out your own container classes.
--------------------------------------------------------------------------------
List of Container Classes:
    Group       A Group applies effects and transformations collectively to all its children.
    Pane        It is used for absolute positioning of its children.
    HBox        It arranges its children horizontally in a single row.
    VBox        It arranges its children vertically in a single column.
    FlowPane    It arranges its children horizontally or vertically in rows or columns. If they do not fit
                in a single row or column, they are wrapped at the specified width or height.
    BorderPane  It divides its layout area in the top, right, bottom, left, and center regions and places
                each of its children in one of the five regions.
    StackPane   It arranges its children in a back-to-front stack.
    TilePane    It arranges its children in a grid of uniformly sized cells.
    GridPane    It arranges its children in a grid of variable sized cells.
    AnchorPane  It arranges its children by anchoring their edges to the edges of the layout area.
    TextFlow    It lays out rich text whose content may consist of several Text nodes.
--------------------------------------------------------------------------------

Utility Classes:
    The Insets class represents inside offsets in four directions: top, right, bottom, and left, for a rectangular
    area. It is an immutable class. It has two constructors – one lets you set the same offset for all four directions
    and another lets you set different offsets for each direction.
        • Insets(double topRightBottomLeft)
        • Insets(double top, double right, double bottom, double left)

Utility Enums:
    HPos    Defines three constants: LEFT, CENTER, and RIGHT, to describe the horizontal positioning and
            alignment.

    VPos    The constants of the VPos enum describe vertical positioning and alignment. It has four constants: TOP,
            CENTER, BASELINE, and BOTTOM.  

    Pos     The constants in the Pos enum describe vertical and horizontal positioning and alignment. It has constants
            for all combinations of VPos and HPos constants. Constants in Pos enum are BASELINE_CENTER, BASELINE_LEFT,
            BASELINE_RIGHT, BOTTOM_CENTER, BOTTOM_LEFT, BOTTOM_RIGHT, CENTER, CENTER_LEFT, CENTER_RIGHT,
            TOP_CENTER, TOP_LEFT, and TOP_RIGHT. It has two methods – getHpos() and getVpos() – that return
            objects of HPos and VPos enum types, describing the horizontal and vertical positioning and alignment,
            respectively.        

    HorizontalDirection     The HorizontalDirection enum has two constants, LEFT and RIGHT, which denote directions to the left and
                            right, respectively.  

    VerticalDirection   The VerticalDirection enum has two constants, UP and DOWN, which denote up and down directions,
                        respectively. 

    Orientation     The Orientation enum has two constants, HORIZONTAL and VERTICAL, which denote horizontal and vertical
                    orientations, respectively. 

    Side    The Side enum has four constants: TOP, RIGHT, BOTTOM, and LEFT, to denote the four sides of a rectangle.

    Priority    Sometimes, a container may have more or less space available than required to layout its children using
                their preferred sizes. The Priority enum is used to denote the priority of a node to grow or shrink when its
                parent has more or less space. It contains three constants: ALWAYS, NEVER, and SOMETIMES. A node with the
                ALWAYS priority always grows or shrinks as the available space increases or decreases. A node with NEVER
                priority never grows or shrinks as the available space increases or decreases. A node with SOMETIMES priority
                grows or shrinks when there are no other nodes with ALWAYS priority or nodes with ALWAYS priority could not
                consume all the increased or decreased space.
--------------------------------------------------------------------------------            



