
package effect;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.effect.ColorInput;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

/*
The ColorInput effect is a simple effect that fills (floods) a rectangular region with a specified paint.
Typically, it is used as an input to another effect.
An instance of the ColorInput class represents the ColorInput effect. The class contains five properties
that define the location, size, and the paint for the rectangular region:
    • x
    • y
    • width
    • height
    • paint

Creating a ColorInput object is similar to creating a rectangle filled with the paint of the ColorInput.
The x and y properties specify the location of the upper left corner of the rectangular region in the local
coordinate system. The width and height properties specify the size of the rectangular region. The default
value for x, y, width, and height is 0.0. The paint property specifies the fill paint. The default value for paint
is Color.RED.

You can use the following constructors to create an object of the ColorInput class:
    • ColorInput()
    • ColorInput(double x, double y, double width, double height, Paint paint)

The following snippet of code creates a ColorInput effect and applies it to a rectangle. Note that when you apply the ColorInput effect to a node,
all you see is the rectangular area generated by the ColorInput effect. As stated earlier, the ColorInput effect
is not applied directly on nodes. Rather it is used as an input to another effect.
*/
public class ColorInputTest extends Application {
	public static void main(String[] args) {
		Application.launch(args);
	}

	@Override
	public void start(Stage stage) {
     
        ColorInput effect = new ColorInput();
        effect.setWidth(100);
        effect.setHeight(50);
        effect.setPaint(Color.LIGHTGRAY);
        // Size of the Rectangle does not matter to the rectangular area of the ColorInput
        Rectangle r1 = new Rectangle(100, 50);
        r1.setEffect(effect);
        
		VBox root = new VBox(r1);
		root.setSpacing(20);
		root.setStyle(
            "-fx-padding: 10;" + 
            "-fx-border-style: solid inside;" + 
            "-fx-border-width: 2;" +
            "-fx-border-insets: 5;" + 
            "-fx-border-radius: 5;" + 
            "-fx-border-color: blue;"
        );
		Scene scene = new Scene(root);
		stage.setScene(scene);
		stage.setTitle("Using Bloom Effect");
		stage.show();
	}
}
